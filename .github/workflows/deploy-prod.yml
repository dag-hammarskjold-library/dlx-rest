name: Deploy to Production from latest release

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for accurate tagging
          
      - name: Fetch latest release tag
        id: get_latest_release
        run: |
          git fetch --tags
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)
          echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT

      - name: Checkout latest release
        run: |
          git checkout ${{ steps.get_latest_release.outputs.latest_tag }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        run: |
          docker build -t ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:prod \
            --build-arg APP=app \
            --build-arg DLX_REST_ENV=PRODUCTION \
            -f Dockerfile .

      - name: Run tests
        run: |
          docker run --rm ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:prod pytest
    
      - name: Push Docker image
        run: |
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:prod

      - name: Prepare ECS task definition
        run: |
          sed "s|<account_id>|${{ secrets.AWS_ACCOUNT_ID }}|g" ecs/ecs-task-definition.json.template > ecs/ecs-task-definition.json
          sed "s|nightly|prod|g" ecs/ecs-task-definition.json > ecs/ecs-task-definition.json.tmp2
          sed "s|DLX_REST_DEV|DLX_REST_PROD|g" ecs/ecs-task-definition.json.tmp2 > ecs/ecs-task-definition.json

      - name: Fill in image id in ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ./ecs/ecs-task-definition.json
          container-name: dlx-rest-prod
          image: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:prod

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          cluster: dlx-rest-prod-cluster
          service: dlx-rest-prod-task-service
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          wait-for-service-stability: true