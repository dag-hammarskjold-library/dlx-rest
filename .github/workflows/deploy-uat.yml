name: Build and push container to ECR and Lambda
on:
    release:
      types: [ released ]
  
jobs:
    deploy:
        name: Build Docker
        runs-on: ubuntu-latest
        steps:
        - name: Checkout
          uses: actions/checkout@v4

        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v4
          with: 
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ secrets.AWS_REGION }}

        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v2

        - name: Build, tag, and push the image to ECR
          id: build-image
          env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            ECR_REPOSITORY: dlx-rest
            IMAGE_TAG: latest
          run: |
            cd ./gdoc-dlx-lambda
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
            echo "Pushing image to ECR..."
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

            - name: install lightsail ctl
            run: |
             sudo curl "https://s3.us-west-2.amazonaws.com/lightsailctl/latest/linux-amd64/lightsailctl" -o "/usr/local/bin/lightsailctl"
             sudo chmod +x /usr/local/bin/lightsailctl 
  
        - name: Deploy to Lightsail
          id: deploy-lightsail
          env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
            IMAGE_TAG: latest
          run: |
              aws lightsail create-container-service-deployment \
              --service-name container-service-1 \
              --containers '{"ods":{"image":"${{env.ECR_REGISTRY}}/${{env.ECR_REPOSITORY}}:${{env.IMAGE_TAG}}","command":[],"environment":{"AWS_ACCESS_KEY_ID": "${{secrets.AWS_ACCESS_KEY_ID}}","AWS_DEFAULT_REGION": "${{secrets.AWS_REGION}}","AWS_SECRET_ACCESS_KEY": "${{secrets.AWS_SECRET_ACCESS_KEY}}", "DLX_REST_UAT": "True"},"ports":{"5000":"HTTP"}}}' \
              --public-endpoint '{"containerName": "ods","containerPort": 5000,"healthCheck": {"healthyThreshold": 2,"unhealthyThreshold": 2,"timeoutSeconds": 60,"intervalSeconds": 120,"path": "/","successCodes": "200-499"}}'